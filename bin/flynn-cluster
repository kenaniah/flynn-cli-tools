#!/usr/bin/env ruby

require 'base64'
require 'table_print'
require 'commander'
require 'json'
require 'httparty'

# Custom libs
$:.unshift File.join(File.dirname(__FILE__), "..")
require 'lib/flynn/cli/tools'

tp.set :max_width, 100

# Returns whether the object is tagged with something
def has_tag? obj, key, value
	obj["Tags"].each do |tag|
		return true if tag["Key"] == key && tag["Value"] == value
	end
	return false
end

# Returns the value of a tag or nil
def tag_value obj, key
	obj["Tags"].each do |tag|
		return tag["Value"] if tag["Key"] == key
	end
	nil
end

# Returns a table row for the given auto scaling group
def asg_table_row obj
	return ({
		cluster: tag_value(obj, "Name"),
		asg_name: obj["AutoScalingGroupName"],
		launch_config: obj["LaunchConfigurationName"],
		num_instances: obj["Instances"].length,
		zones: obj["AvailabilityZones"].join(", "),
		created: obj["CreatedTime"]
	})
end

# Returns a table row for the given launch configuration
def lc_table_row obj
	return ({
		launch_config: obj["LaunchConfigurationName"],
		version: obj["LaunchConfigurationName"].sub('Flynn Platform', '').strip,
		image: obj["ImageId"],
		instance_type: obj["InstanceType"],
		security_groups: obj["SecurityGroups"].join(", "),
		ssh_key: obj["KeyName"],
		created: obj["CreatedTime"]
	})
end

module Flynn::CLI::Tools

	Commander.configure do
		include Flynn::CLI::Tools::CommanderSetup
		program :description, "Administrates flynn clusters on AWS"

		global_option "-y", "--yes", "Assume 'yes' to all prompts and run non-interactively." do
			Flynn::CLI::Tools.options[:yes] = true
		end

		command :list do |c|

			c.description = "Lists existing flynn clusters"

			c.action do |args, opts|

				# Find all auto scaling groups
				res = JSON.parse(Flynn::CLI::Tools.capture "aws autoscaling describe-auto-scaling-groups")

				# Find only the ones that are flynn tagged
				rows = []
				res["AutoScalingGroups"].each do |row|

					if tag_value(row, "Platform") == "flynn"
						rows.push asg_table_row(row)
					end

				end

				puts "\nFlynn auto scaling groups...\n\n"
				tp rows
				puts ""

			end

		end

		command :"list-configs" do |c|

			c.description = "Lists existing flynn launch configurations"

			c.action do |args, opts|

				# Find all launch configurations
				res = JSON.parse(Flynn::CLI::Tools.capture "aws autoscaling describe-launch-configurations")

				# Find only the ones that are flynn related
				rows = []
				res["LaunchConfigurations"].each do |row|

					if row["LaunchConfigurationName"].start_with? "Flynn Platform"

						rows.push lc_table_row(row)

					end

				end

				puts "\nFlynn launch configurations...\n\n"
				tp rows
				puts ""

			end

		end

		command :"list-images" do |c|

			c.description = "Lists the AMIs flynn uses by version"

			c.option "--for-version VERSION", "Lists the AMI used by a specific flynn version"

			c.action do |args, opts|

				# Pull a specific version?
				if opts.for_version
					puts "\nFlynn AMI for version #{opts.for_version} in region #{Flynn::CLI::Tools.aws_region}...\n\n"
					tp Flynn::CLI::Tools.flynn_images opts.for_version
					puts ""
				else
					puts "\nFlynn AMIs for region #{Flynn::CLI::Tools.aws_region}...\n\n"
					tp Flynn::CLI::Tools.flynn_images
					puts ""
				end

			end

		end

		command :"latest-version" do |c|

			c.description = "Shows the latest version released"

			c.action do |args, opts|
				Flynn::CLI::Tools.latest_version
			end

		end

		command :"generate-cloud-config" do |c|

			c.description = "Outputs a cloud config file"

			c.action do |args, opts|

				puts Flynn::CLI::Tools.generate_cloud_config

			end

		end

		command :"create-launch-configuration" do |c|

			c.description = "Creates a launch configuration"

			c.option "--key-name KEYNAME", "The SSH key to be attached to ec2 instances"
			c.option "--security-groups GROUPS", "A comma-separated list of security group IDs to be attached"
			c.option "--volume-size GIGABYTES", "How many gigabytes to use for the root mount"

			c.action do |args, opts|

				version = Flynn::CLI::Tools.latest_version
				ami = Flynn::CLI::Tools.flynn_images(version).first
				block_device = JSON.parse(`aws ec2 describe-images --image-ids #{ami[:image]} --query 'Images[*].BlockDeviceMappings[0]'`)
				block_device.first["Ebs"]["VolumeSize"] = opts.volume_size.to_i
				block_device.first["Ebs"].delete "Encrypted"

				Tempfile.create "cloud-config" do |file|
					file.write Flynn::CLI::Tools.generate_cloud_config
					file.close

					cmd = "aws autoscaling create-launch-configuration"
					cmd += " --associate-public-ip-address"
					cmd += " --block-device-mappings #{JSON.generate JSON.generate(block_device)}"
					cmd += " --ebs-optimized"
					cmd += " --image-id #{ami[:image]}"
					cmd += " --instance-type m4.large"
					cmd += " --key-name #{opts.key_name}"
					cmd += " --launch-configuration-name 'Flynn Platform #{version}'"
					cmd += " --security-groups '#{opts.security_groups.split(',').join(' ')}'"
					cmd += " --user-data file://#{file.path}"

					puts cmd
					puts `#{cmd}`

				end

			end

		end

		command :"create-auto-scaling-group" do |c|

			c.description = "Generates an auto-scaling group using a launch configuration"

			c.option "--launch-config NAME", "The name of the launch config to use"
			c.option "--name NAME", "The name to use for the auto-scaling group"
			c.option "--parent-domain DOMAIN", "The domain to which a subdomain for this cluster will be added"
			c.option "--subnets SUBNETS", "A comma-separated list of subnet IDs to launch in"

			c.action do |args, opts|

				tags = [
					{
						"Key": "Name",
						"Value": opts.name,
						"PropagateAtLaunch": true
					},
					{
						"Key": "Platform",
						"Value": "flynn",
						"PropagateAtLaunch": true
					},
				]

				cmd = "aws autoscaling create-auto-scaling-group"
				cmd += " --auto-scaling-group-name #{opts.name}.#{opts.parent_domain}"
				cmd += " --launch-configuration-name '#{opts.launch_config}'"
				cmd += " --min-size 3"
				cmd += " --desired-capacity 3"
				cmd += " --max-size 3"
				cmd += " --vpc-zone-identifier #{opts.subnets}"
				cmd += " --tags #{JSON.generate JSON.generate(tags)}"

				puts cmd
				puts `#{cmd}`

			end

		end

	end

end
